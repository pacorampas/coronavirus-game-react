{"version":3,"sources":["screens/home/Home.module.css","components/button/Button.js","utils/useAnimationEnd.js","components/modal/Modal.js","components/modalGameOver/ModalGameOver.js","screens/home/Home.js","services/AppService.js","screens/game/Chart.js","screens/game/Game.js","App.js","serviceWorker.js","index.js","screens/game/Game.module.css","components/button/Button.module.css","components/modal/Modal.module.css","components/modalGameOver/ModalGameOver.module.css"],"names":["module","exports","React","memo","children","className","variant","rest","c","styles","button","ANIMATE_STATES","requestAnimationFrame","window","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","useAnimationEnd","onStateChange","state","metadata","classPrefix","animateRef","useRef","useState","stateInternal","setStateInternal","useEffect","handleStateChangeMemo","useCallback","event","current","target","nextState","getNextState","handleStateChange","addEventListener","selfCurrent","removeEventListener","animationClass","mapStateWithClassCSSModule","getCSSClass","classPrefixPar","console","error","ref","animationState","modal","newBest","points","bonusTime","onAccept","onCancel","confetiRef","anim","showNewBestText","setShowNewBestText","countUp","useCountUp","end","delay","duration","lottie","loadAnimation","container","renderer","loop","autoplay","path","setTimeout","goToAndPlay","wrapper","title","wrapperPoints","text","Number","bonusPoints","buttons","onClick","animation","setScreenActive","SCREENS_IDS","game","historyJson","localStorage","getItem","this","history","JSON","parse","newHistoryItem","date","Date","now","length","push","saveInLocalStorage","index","findIndex","pointsItem","splice","pop","setItem","stringify","gameData","setGameData","globalCollectData","onChangeData","data","dataPrepared","newData","Object","values","forEach","step","lastIndex","gameTime","prepateDataToChart","height","name","dataKey","type","domain","allowDecimals","stackId","stroke","fill","isAnimationActive","GAME","width","modalState","setModalState","showModalGameOver","setShowModalGameOver","exit","setExit","setPoints","setBonusTime","setNewBest","hideModal","initGame","time","newBonusPoints","Math","round","AppService","setNewPuntation","destroy","id","scene","getScenes","restart","home","screenActive","props","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.313be821.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartWrapper\":\"Home_chartWrapper__1VYsj\"};","import React from 'react'\nimport c from 'classnames'\nimport styles from './Button.module.css'\n\nfunction Button({ children, className, variant, ...rest }) {\n  return (\n    <button \n      className={c(\n        className,\n        styles.button,\n        styles[variant]\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default React.memo(Button)","import { useRef, useState, useEffect, useCallback } from 'react'\n\nexport const ANIMATE_STATES = {\n  waitingToEnter: 1,\n  entering: 2,\n  entered: 3,\n  leaving: 4,\n  left: 5\n}\n\nconst requestAnimationFrame =\n  window.requestAnimationFrame ||\n  window.mozRequestAnimationFrame ||\n  window.webkitRequestAnimationFrame ||\n  window.msRequestAnimationFrame\nwindow.requestAnimationFrame = requestAnimationFrame\n\nconst useAnimationEnd = ({ onStateChange, state, metadata, styles, classPrefix }) => {\n  const animateRef = useRef()\n  const [stateInternal, setStateInternal] = useState(state ? state : ANIMATE_STATES.waitingToEnter)\n\n  useEffect(() => {\n    const stateTemp = state ? state : ANIMATE_STATES.waitingToEnter\n    setStateInternal(stateTemp)\n  }, [state])\n\n  const handleStateChangeMemo = useCallback(\n    event => {\n      const handleStateChange = event => {\n        const getNextState = state => {\n          if (ANIMATE_STATES.entering === state) {\n            setStateInternal(ANIMATE_STATES.entered)\n            return ANIMATE_STATES.entered\n          } else if (ANIMATE_STATES.leaving === state) {\n        \n            setStateInternal(ANIMATE_STATES.left)\n            return ANIMATE_STATES.left\n          }\n        }\n\n        if (animateRef.current !== event.target) {\n          return\n        }\n\n        const nextState = getNextState(stateInternal)\n\n        onStateChange &&\n          onStateChange({ event, state: nextState, metadata })\n      }\n\n      return requestAnimationFrame(() => handleStateChange(event))\n    },\n    [stateInternal, onStateChange, metadata]\n  )\n\n  useEffect(() => {\n    animateRef.current.addEventListener('animationend', handleStateChangeMemo)\n\n    const selfCurrent = animateRef.current\n\n    return () =>\n      selfCurrent.removeEventListener('animationend', handleStateChangeMemo)\n  }, [animateRef, handleStateChangeMemo])\n\n  const getCSSClass = useCallback(() => {\n    return styles && mapStateWithClassCSSModule({ state, styles, classPrefix })\n  }, [state, styles, classPrefix])\n\n  const animationClass = getCSSClass()\n\n  return [\n    animateRef, \n    animationClass,\n    stateInternal\n  ]\n}\n\nexport default useAnimationEnd\n\nexport const mapStateWithClass = ({ state, classPrefix }) => {\n  let classPrefixPar = classPrefix\n\n  if (!classPrefixPar) {\n    classPrefixPar = 'spark-animation'\n  }\n\n  switch (state) {\n    case ANIMATE_STATES.waitingToEnter:\n      return `${classPrefixPar}--waiting-to-enter`\n    case ANIMATE_STATES.entering:\n      return `${classPrefixPar}--entering`\n    case ANIMATE_STATES.entered:\n      return `${classPrefixPar}--entered`\n    case ANIMATE_STATES.leaving:\n      return `${classPrefixPar}--leaving`\n    case ANIMATE_STATES.left:\n      return `${classPrefixPar}--left`\n    default:\n      return classPrefixPar\n  }\n}\n\nexport const mapStateWithClassCSSModule = ({ state, styles, classPrefix }) => {\n  if (!styles) {\n    console.error('[mapStateWithClassCSSModule] you should pass an css module styles object')\n    return\n  }\n\n  let classPrefixPar = classPrefix\n  if (!classPrefixPar) {\n    classPrefixPar = 'spark-animation'\n  }\n  switch (state) {\n    case ANIMATE_STATES.waitingToEnter:\n      return styles[`${classPrefixPar}--waiting-to-enter`]\n    case ANIMATE_STATES.entering:\n      return styles[`${classPrefixPar}--entering`]\n    case ANIMATE_STATES.entered:\n      return styles[`${classPrefixPar}--entered`]\n    case ANIMATE_STATES.leaving:\n      return styles[`${classPrefixPar}--leaving`]\n    case ANIMATE_STATES.left:\n      return styles[`${classPrefixPar}--left`]\n    default:\n      return classPrefixPar\n  }\n}\n","/* eslint-disable no-undef */\nimport React, { useEffect } from 'react'\nimport c from 'classnames'\nimport useAnimationEnd from 'utils/useAnimationEnd'\nimport styles from './Modal.module.css'\n\nfunction Modal({ className, state, onStateChange, children }) {\n  const [ref, animationClass, animationState] = useAnimationEnd({ state, styles, classPrefix: 'modal' })\n\n  useEffect(() => {\n    onStateChange && onStateChange(animationState)\n  }, [animationState, onStateChange])\n\n  return (\n    <div \n      ref={ref} \n      className={c(\n        className,\n        styles.modal, \n        animationClass\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default React.memo(Modal)\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useCountUp } from 'react-countup'\nimport Modal from 'components/modal/Modal'\nimport Button from 'components/button/Button'\nimport styles from './ModalGameOver.module.css'\nimport lottie from 'lottie-web'\n\nfunction ModalGameOver({ state, newBest, points, bonusTime, onAccept, onCancel, ...rest }) {\n  const confetiRef = useRef()\n  const anim = useRef()\n  const [showNewBestText, setShowNewBestText] = useState(false)\n\n  const { countUp } = useCountUp({ end: bonusTime, delay: 1, duration: 5 })\n\n  useEffect(() => {\n    if (!newBest) {\n      return\n    }\n\n    anim.current = lottie.loadAnimation({\n      container: confetiRef.current, // the dom element that will contain the animation\n      renderer: 'svg',\n      loop: false,\n      autoplay: false,\n      path: 'https://assets7.lottiefiles.com/packages/lf20_aEFaHc.json'\n    })\n\n    setTimeout(() => {\n      anim.current.goToAndPlay(0)\n      setShowNewBestText(true)\n    }, 4000)\n\n  }, [])\n  \n  const hanldeClickRestart = () => {\n    onAccept && onAccept()\n  }\n\n  const hanldeClickExit = () => {\n    onCancel && onCancel()\n  }\n \n  return (\n    <Modal state={state} {...rest}>\n      <div className={styles.wrapper}>\n        <h1 className={styles.title}>¡SE ACABÓ!</h1>\n        \n        <div className={styles.wrapperPoints}>\n          {showNewBestText ? \n            <p className={styles.text}>¡Nuevo record personal!</p> :\n            <p className={styles.text}>Tu puntuación</p>\n          }\n          \n          <p className={styles.points}>\n            {(points + Number(countUp))} pts\n          </p>\n\n          <p className={styles.text}>Bonus de tiempo</p>\n          <p className={styles.bonusPoints}>+ {bonusTime - Number(countUp)}</p>\n        </div>\n        <div className={styles.buttons}>\n          <Button \n            className={styles.button}\n            onClick={hanldeClickRestart}\n          >\n            REINTENTAR\n          </Button>\n          <Button \n            className={styles.button} \n            variant=\"negative\"\n            onClick={hanldeClickExit}\n          >\n            SALIR\n          </Button>\n        </div>\n        <div className={styles.animation} ref={confetiRef} />\n      </div>\n    </Modal>\n  );\n}\n\nexport default React.memo(ModalGameOver)\n","/* eslint-disable no-undef */\nimport React from 'react'\nimport { SCREENS_IDS } from 'App'\nimport Button from 'components/button/Button'\nimport styles from './Home.module.css'\n\nimport ModalGameOver from 'components/modalGameOver/ModalGameOver'\n\nfunction Home({ setScreenActive }) {\n  const handleClickGame = () => {\n    setScreenActive(SCREENS_IDS.game)\n  }\n \n  return (\n    <div>\n      <h1>Home</h1>\n      <Button onClick={handleClickGame}>\n        PLAY\n      </Button>\n      {/* <ModalGameOver state={2} points={3000} bonusTime={376} /> */}\n    </div>\n  );\n}\n\nexport default React.memo(Home)\n","\n\nclass AppService {\n  constructor() {\n    const historyJson = localStorage.getItem('history')\n    this.history = historyJson ? JSON.parse(historyJson) : []\n  }\n\n  setNewPuntation(points) {\n    // return true if is the new best\n    const newHistoryItem = {\n      points,\n      date: Date.now()\n    }\n\n    if (!this.history.length) {\n      this.history.push(newHistoryItem)\n      this.saveInLocalStorage()\n      return true\n    }\n\n    const index = this.history.findIndex(pointsItem => \n      points > pointsItem.points\n    )\n    \n    if (index > -1) {\n      this.history.splice(index, 1, newHistoryItem)\n    } else {\n      this.history.push(newHistoryItem)\n    }\n\n    if (this.history.length > 10) {\n      this.history.pop()\n    }\n\n    this.saveInLocalStorage()\n\n    return index === 0\n  }\n\n  saveInLocalStorage() {\n    localStorage.setItem('history', JSON.stringify(this.history))\n  }\n}\n\nexport default new AppService()\n","/* eslint-disable no-undef */\nimport React, { useEffect, useState } from 'react'\nimport { \n  AreaChart, \n  linearGradient, \n  XAxis, \n  YAxis, \n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Area \n} from 'recharts'\n\nconst prepateDataToChart = data => {\n\n  // return Object.values(data)\n  let newData = []\n\n  // grup all repeat gameTime values\n  Object.values(data).forEach(step => {\n    const lastIndex = newData.length - 1\n    if (lastIndex > -1 && newData[lastIndex].gameTime === step.gameTime) {\n      newData.pop()\n      newData.push(step)\n    } else {\n      newData.push(step)\n    }\n  })\n\n  return newData\n}\n\n\nfunction Chart() {\n  const [gameData, setGameData] = useState([])\n  \n  useEffect(() => {\n    globalCollectData.onChangeData(data => {\n      const dataPrepared = prepateDataToChart(data)\n      setGameData(dataPrepared)\n    })\n  }, [])\n\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        height={250} \n        data={gameData}\n      >\n        {/* <defs>\n          <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\n          </linearGradient>\n          <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\n          </linearGradient>\n        </defs> */}\n        <XAxis \n          name=\"time\" \n          dataKey=\"gameTime\"\n          type=\"number\" \n          domain={[0, 40]}\n          allowDecimals={false}\n          // allowDataOverflow={true} \n          // interval={0}  \n        />\n        <YAxis domain={[0, 40]}  />\n        {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n        {/* <Tooltip /> */}\n        <Area type=\"monotone\" dataKey=\"infected\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" isAnimationActive={false} />\n        {/* <Area type=\"monotone\" dataKey=\"infected\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" /> */}\n        {/* <Area type=\"monotone\" dataKey=\"recovered\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" /> */}\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default React.memo(Chart)\n","/* eslint-disable no-undef */\nimport React, { useEffect, useState, useRef } from 'react'\nimport { SCREENS_IDS } from 'App'\nimport { ANIMATE_STATES } from 'utils/useAnimationEnd'\nimport ModalGameOver from 'components/modalGameOver/ModalGameOver'\nimport AppService from 'services/AppService'\nimport Chart from './Chart'\nimport styles from './Game.module.css'\n\nconst GAME = {\n  size: {\n    width: 1000,\n    height: 600,\n  }\n}\n\nfunction Game({ setScreenActive }) {\n  const game = useRef()\n  const [modalState, setModalState] = useState()\n  const [showModalGameOver, setShowModalGameOver] = useState(false)\n  const [exit, setExit] = useState(false)\n  const [points, setPoints] = useState(0)\n  const [bonusTime, setBonusTime] = useState(0)\n  const [newBest, setNewBest] = useState(false)\n\n  const showModal = () => {\n    setModalState(ANIMATE_STATES.entering)\n    setShowModalGameOver(true)\n  }\n\n  const hideModal = () => {\n    setModalState(ANIMATE_STATES.leaving)\n  }\n\n  const handleCancelModal = () => {\n    hideModal()\n    setExit(true)\n  }\n\n  const hanldeStateChange = state => {\n    // eslint-disable-next-line default-case\n    switch(state) {\n      case ANIMATE_STATES.left:\n        setShowModalGameOver(false)\n        exit && setScreenActive(SCREENS_IDS.home)\n        return\n    }\n  }\n\n  const hanldeAcceptModal = () => {\n    game.current.scene.getScenes(true)[0].scene.restart()\n    hideModal()\n  }\n    \n  useEffect(() => {\n    const handleGameOver = ({ time, points }) => {\n      const newBonusPoints = Math.round(time * 3.683)\n      setPoints(points)\n      setBonusTime(newBonusPoints)\n      const newBest = AppService.setNewPuntation(newBonusPoints + points)\n      setNewBest(newBest)\n      showModal()\n    }\n\n    game.current = initGame('coronavirusGame', 35, 0, false, true, handleGameOver, GAME.size)\n\n    return () => {\n      game.current.destroy()\n    }\n  }, [])\n  \n  return (\n    <div className={styles.game}>\n\n      <div className={styles.wrapper}>\n        \n        <div id=\"coronavirusGame\" />\n\n        {showModalGameOver && \n          <ModalGameOver\n            className={styles.modal}\n            state={modalState} \n            points={points}\n            bonusTime={bonusTime}\n            newBest={newBest}\n            onAccept={hanldeAcceptModal} \n            onCancel={handleCancelModal}\n            onStateChange={hanldeStateChange}\n          />\n        }\n      </div>\n\n      {/* <div className={styles.chartWrapper}>\n        <Chart />\n      </div> */}\n\n    </div>\n  );\n}\n\nexport default React.memo(Game)\n","/* eslint-disable no-undef */\nimport React, { useState } from 'react'\nimport HomeScreen from './screens/home/Home'\nimport GameScreen from './screens/game/Game'\nimport './App.css'\n\nexport const SCREENS_IDS = {\n  home: 1,\n  game: 2\n}\n\nfunction App() {\n  const [screenActive, setScreenActive] = useState(SCREENS_IDS.home)\n\n  const props = {\n    setScreenActive\n  }\n\n  switch(screenActive) {\n    case SCREENS_IDS.home:\n      return <HomeScreen {...props} />\n    case SCREENS_IDS.game:\n      return <GameScreen {...props} />\n    default:\n      return <HomeScreen {...props} />\n  }\n}\n\nexport default React.memo(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__1oenb\",\"wrapper\":\"Game_wrapper__2JG6h\",\"modal\":\"Game_modal__3yiNf\",\"chartWrapper\":\"Game_chartWrapper__2xDFN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2cZ5P\",\"negative\":\"Button_negative__nytKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2J34Z\",\"modal--waiting-to-enter\":\"Modal_modal--waiting-to-enter__3CFSj\",\"enter\":\"Modal_enter__12j6C\",\"modal--entering\":\"Modal_modal--entering__3hm3E\",\"entering\":\"Modal_entering__tp7ZH\",\"modal--entered\":\"Modal_modal--entered__1ii0l\",\"modal--leaving\":\"Modal_modal--leaving__1uQDl\",\"leaving\":\"Modal_leaving__VWOLZ\",\"modal--left\":\"Modal_modal--left__2nfQf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ModalGameOver_wrapper__3O8rr\",\"wrapperPoints\":\"ModalGameOver_wrapperPoints__27hwd\",\"title\":\"ModalGameOver_title__1yMxF\",\"text\":\"ModalGameOver_text__1zGXq\",\"points\":\"ModalGameOver_points__1mH6S\",\"bonusPoints\":\"ModalGameOver_bonusPoints__3eRhj\",\"buttons\":\"ModalGameOver_buttons__38fgF\",\"button\":\"ModalGameOver_button__2CpMe\",\"animation\":\"ModalGameOver_animation__ZGN6t\"};"],"sourceRoot":""}